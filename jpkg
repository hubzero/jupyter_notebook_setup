#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import sys
import os
import argparse
from subprocess import check_output
from string import Template

# for python2 compatibility
try:
    input = raw_input
except:
    pass

"""
This installation script installs the same version of anaconda2 and anaconda3 distributions.

Anaconda2 is built with Python 2
Anaconda3 is build with Python 3

We set up the jupyter notebook configurations to enable either python 2 or 3
kernels to be used regardless of which anaconda distribution was used to launch
the jupyter notebook server.

We also add our custom jupyter hub code to the jupyter configs.  All our configuration changes
and extensions are added to the anaconda subdirectory.

The tricky part is that anaconda installs its own extensions which we do not want.  It also
manages its own kernels which assume you use its virtual environments.  We do not.
So we uninstall the jupyter conda extensions and then reenable our extensions.

"""


def install_packages(cname, pyver):
    global dirname

    pname = os.path.join(dirname, "configs", cname)
    print("Installing Packages for Python%s from %s" % (pyver, cname))
    two = True
    three = True

    with open(pname) as fp:
        for line in fp:
            if line[0] == '+':
                continue
            if line[0:8] == "# 2 ONLY":
                two = True
                three = False
                continue
            if line[0:8] == "# 3 ONLY":
                two = False
                three = True
                continue
            if line[0] == '#':
                # comment
                continue
            if line[0] == '!':
                line = line[1:].strip()
                print("Running:", line)
                os.system(line)
                continue
            sline = line.split()
            channel = None
            if len(sline) == 0:
                continue
            if sline[-1] == '--no-deps':
                sline = sline[:-1]
                nodeps = '--no-deps'
            else:
                nodeps = ''

            if len(sline) == 3:
                pkg, ver, inst = sline
            elif len(sline) == 4:
                pkg, ver, inst, channel = sline
            else:
                if len(sline) > 0:
                    print("Cannot parse line:", line)
                continue

            if (two and pyver == 2) or (three and pyver == 3):
                print("\n************** Installing %s %s" % (pkg, ver))
                if inst == 'conda':
                    cmd = "conda install -y %s=%s %s" % (pkg, ver, nodeps)
                    if channel:
                        cmd += " -c %s" % channel
                elif inst == 'pip':
                    if ver == '*':
                        cmd = "pip install -U --upgrade-strategy only-if-needed %s" % pkg
                    else:
                        cmd = "pip install -U --upgrade-strategy only-if-needed %s==%s" % (pkg, ver)
                elif inst == 'npm':
                        cmd = 'npm install -g %s@%s' % (pkg, ver)
                print("Running '%s'" % cmd)
                if os.system(cmd):
                    print("ERROR: Installation of %s failed.\n" % pkg)
        print('\n')


def install_file(fname, destdir, pyver):
    "Run the anaconda install file"

    os.system('bash ' + fname + ' -b -p ' + destdir)

    bindir = os.path.join(destdir, 'bin')

    # set PATH so we can use 'conda'  and 'pip'
    path = os.environ['PATH']
    os.environ['PATH'] = bindir + ':' + path

    # clean out old cache
    os.system('conda clean -y --all')
    # remove any old channels
    os.system('rm -f ~/.condarc')

    # reset PATH
    os.environ['PATH'] = path

    return


def check_perm(pathlist):
    """In each installation directory, check the permissions of files so
    we don't end up with packages users can't read."""
    cwd = os.getcwd()

    for p in pathlist:
        os.chdir(p)

        print("Checking file permissions in", p)
        bindir = os.path.join(p, 'bin')

        print("Finding and fixing files that are not world-readable")
        os.system('find . ! -perm -004 -exec chmod a+r {} \;')

        print("Finding non-searchable directories.  Should be none.")
        os.system('find . -type d -a ! -perm -011')

        print('Finding and fixing world-writable files.')
        os.system('find -L . -perm -o+w -exec chmod o-w {} \;')

        os.chdir(cwd)


def install_updates(cname, pathlist):
    global dirname

    path = os.environ['PATH']
    for p in pathlist:
        pyver = 3 if p == pathlist[0] else 2
        bindir = os.path.join(p, 'bin')
        os.environ['PATH'] = bindir + ':' + path

        # install packages we want
        install_packages(cname, pyver)

        # install jupyter_unsign.py and jupyter_tool.py
        os.system('cp %s %s' % (os.path.join(dirname, 'jupyter_unsign.py'), bindir))
        os.system('cp %s %s' % (os.path.join(dirname, 'jupyter_tool.py'), bindir))

        # start_jupyter script
        os.system('cp %s %s' % (os.path.join(dirname, 'start_jupyter'), bindir))
        if pyver == 3:
            os.system('cp %s %s' % (os.path.join(dirname, 'start_jupyterlab'), bindir))

        os.environ['PATH'] = path


def install_R_pkgs(pathlist):
    global dirname

    path = os.environ['PATH']
    for p in pathlist:
        bindir = os.path.join(p, 'bin')
        os.environ['PATH'] = bindir + ':' + path

        # install packages we want
        scriptname = os.path.join(dirname, 'inst.R')
        os.system('Rscript %s' % scriptname)

        os.environ['PATH'] = path


def install_kernels(pathlist):
    "Install python 2 and python 3 kernels"
    print("install_kernels", pathlist)

    path = os.environ['PATH']

    for p in pathlist:
        os.environ['PATH'] = os.path.join(p, 'bin') + ':' + path
        pyver = 3 if p == pathlist[0] else 2
        for k in pathlist:
            print('python -m ipykernel install --name "python%s" --prefix=%s --display-name "Python%s"' % (pyver, k, pyver))
            os.system('python -m ipykernel install --name "python%s" --prefix=%s --display-name "Python%s"' %
            (pyver, k, pyver))
        os.environ['PATH'] = path


def install_octave(pathlist, env_dir, desktop):
    "Install octave kernel, if octave is found"
    for p in pathlist:
        octave_kstr = find_octave(p, desktop, env_dir, prompt=False)
        if octave_kstr is not None:
            dname = os.path.join(p, 'share', 'jupyter', 'kernels', 'octave')
            if not os.path.exists(dname):
                os.mkdir(dname)
            fname = os.path.join(dname, 'kernel.json')
            with open(fname, 'w') as f:
                f.write(octave_kstr)


def write_env(rver, env_dir, pathlist):
    # write environ files for 'use' on the hubs
    for p in pathlist:
        bindir = os.path.join(p, 'bin')
        os.system('mkdir -p %s' % env_dir)
        
        fname = os.path.join(env_dir, os.path.basename(p))
        with open(fname, 'w') as f:
            f.write('\nconflict ANACONDA_CHOICE\n\n')
            f.write('desc "Anaconda is a package manager, an environment manager, a Python distribution, and a collection of over 1,000+ open source packages."\n\n')
            f.write('help "https://docs.anaconda.com/new-anaconda-start-here"\n\n')
            f.write('version=%s\n\n' % rver)
            f.write('prepend PATH %s\n\n' % bindir)
            f.write('tags MATHSCI\n')

        # needed for submit, which only works on python 2 for now
        if len(pathlist) > 1 and p == pathlist[1]:
            hubzero = '/usr/lib/python2.7/dist-packages/hubzero'
            libdir = os.path.join(p, 'lib', 'python2.7', 'site-packages')
            os.system('ln -s %s %s' % (hubzero, libdir))


def install_extensions(pathlist, desktop):
    global dirname
    path = os.environ['PATH']
    cwd = os.getcwd()
    os.chdir(dirname)
    os.chdir('nbextensions')

    for p in pathlist:
        with open('jupyter_notebook_config.py', 'r') as f:
            intro = f.read()

        spath = os.path.join(p, 'share', 'jupyter')
        os.system('mkdir -p ' + os.path.join(p, 'etc', 'jupyter'))
        fname = os.path.join(p, 'etc', 'jupyter', 'jupyter_notebook_config.py')
        with open(fname, 'w') as f:
            f.write(intro)
            # f.write("c.Application.log_level = 'DEBUG'\n")
            f.write("c.IPKernelApp.pylab = 'inline'\n")  # always put plots inline
            f.write("import sys\n")
            f.write("sys.path.append('%s')\n" % os.path.join(spath, 'nbextensions'))
            f.write("\n")
            f.write("c.NotebookApp.extra_template_paths = ['%s']\n" % os.path.join(spath, 'templates'))
            f.write("c.NotebookApp.extra_static_paths = ['%s']\n" % os.path.join(spath, 'static'))
            f.write("c.NotebookApp.trust_xheaders = True\n")
            f.write("c.NotebookApp.mathjax_url = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/MathJax.js'\n")
            # needed for notebook 5.0 with holoviews and some others
            #f.write("c.NotebookApp.iopub_data_rate_limit=100000000\n")
            if not desktop:
                f.write("c.NotebookApp.login_handler_class = 'hublogin.HubLoginHandler'\n")
            #if socket.gethostname() == 'nanoHUB':
            #    # mailboxes only on nanohub at this time
            #    f.write("c.NotebookApp.nbserver_extensions = {'inboxes': True}\n")
            # needed for proxy
            f.write("c.NotebookApp.disable_check_xsrf = True")


        bindir = os.path.join(p, 'bin')
        os.environ['PATH'] = bindir + ':' + path

        # Install the tool autorun extension.
        os.system('jupyter nbextension install --sys-prefix autorun')

        if not desktop:
            os.system('jupyter nbextension install --sys-prefix prefs')

        # drag and drop images
        os.system('jupyter nbextension install --sys-prefix dragdrop')

        # install calysto document tools
        os.system('jupyter nbextension install --sys-prefix https://github.com/Calysto/notebook-extensions/archive/master.zip')

        # declarativewidgets, cms, dashboard
        # os.system('jupyter nbextension install --py --sys-prefix declarativewidgets')
        # os.system('jupyter nbextension install --py jupyter_cms --sys-prefix')
        os.system('jupyter nbextension install --py jupyter_dashboards --sys-prefix')

        # install hublogin and terminate
        dst = os.path.join(p, 'share', 'jupyter')
        ext = os.path.join(dst, 'nbextensions')
        os.system('cp terminate.py %s' % ext)
        if not desktop:
            os.system('cp hublogin.py %s' % ext)

        # mailboxes. only on nanohub right now
        #if socket.gethostname() == 'nanoHUB':
        #    os.system('cp inboxes.py %s' % ext)
        #    os.system('jupyter nbextension install --sys-prefix sendto')

        # patch dashboards to work with our tool mode and autorun extensions
        dashdir = os.path.join(ext, 'jupyter_dashboards', 'notebook', 'dashboard-view')
        os.system('patch -f -d %s < dashboard-actions.patch' % dashdir)

        # install logos
        os.system('mkdir -p ' + dst + '/static')
        os.system('cp -r ../logo/* ' + dst + '/static')
        
        # install tool view extensions (really just a replacement for the tree view)
        # os.system("cp tool/tool_ext.py " + ext)
        # os.system("cp -r tool/static " + dst)
        # os.system("cp -r tool/templates " + dst)

        os.environ['PATH'] = path
    os.chdir(cwd)


def cleanup(pathlist, desktop):
    # final cleanup
    
    # remove any local extensions because they may conflict with global
    os.system('rm -rf ~/.local/share/jupyter/nbextensions')

    path = os.environ['PATH']
    for p in pathlist:
        os.environ['PATH'] = os.path.join(p, 'bin') + ':' + path

        # uninstall anaconda jupyter notebook extensions which we don't want
        os.system('conda uninstall -y nb_conda')

        # Enable the extensions.
        # Must do this after uninstalling the conda extensions because they
        # will uninstall our extensions too!  These just update etc/jupyter/nbconfig/notebook.json
        os.system('jupyter nbextension enable --sys-prefix autorun/main 2> /dev/null')
        if not desktop:
            os.system('jupyter nbextension enable --sys-prefix prefs/prefs')
        os.system('jupyter nbextension enable --sys-prefix dragdrop/main')
        # os.system('jupyter nbextension enable --py --sys-prefix widgetsnbextension')
        # os.system('jupyter nbextension enable --py --sys-prefix gmaps')
        # os.system('jupyter serverextension enable --py declarativewidgets --sys-prefix')
        # os.system('jupyter nbextension enable --py --sys-prefix declarativewidgets')
        os.system('jupyter nbextension enable --py jupyter_dashboards --sys-prefix')

        # disable nbdime extension
        # os.system('jupyter nbextension uninstall nbdime')
        
        # maybe someday we will enable nbpresent, but right now it is much too buggy
        # os.system('jupyter nbextension enable --sys-prefix  nbpresent/js/nbpresent.min 2> /dev/null')

        # os.system('jupyter nbextension enable --sys-prefix  --py pythreejs')
        # os.system('jupyter nbextension enable --sys-prefix  --py nglview')
        # if p == pathlist[0]:
        #    # python2 only
        #    os.system('jupyter nbextension enable --sys-prefix  --py nbmolviz')

        # mailboxes. only on nanohub right now
        # if socket.gethostname() == 'nanoHUB':
            # os.system('jupyter nbextension enable --sys-prefix sendto/sendto')

        os.system('conda clean -y --all')
        os.environ['PATH'] = path


def install_misc(pathlist, desktop):
    return
    # global dirname
    # for p in pathlist:
    #     lib = os.path.join(p, 'lib')
    #     libfreeimage = os.path.join(dirname, 'misc', 'libfreeimage-3.16.0-linux64.so')
    #     os.system("cp %s %s" % (libfreeimage, lib))


def get_pathlist(rver):
    global dirname

    pathlist = ['anaconda3-%s' % (rver)]
    if args.nopy2 is False:
        pathlist.append('anaconda2-%s' % (rver))

    for i, p in enumerate(pathlist):
        pathlist[i] = os.path.realpath(p)
    return pathlist


def get_versions(cname):
    global dirname
    env_dir = ""

    cname = os.path.join(dirname, 'configs', cname)
    with open(cname) as fp:
        for line in fp:
            if line[0] == '#':
                # comment
                continue
            sline = line.split()
            if len(sline) != 2:
                continue
            if sline[0] == '+DESKTOP':
                desk = sline[1] == 'True'
            elif sline[0] == '+VERSION':
                ver = sline[1]
            elif sline[0] == '+RVERSION':
                rver = sline[1]
            elif sline[0] == '+ENVIRON_CONFIG_DIR':
                env_dir = sline[1]
            elif sline[0] == '++':
                return (ver, rver, env_dir, desk)


def make_new(args):
    ver, rver, env_dir, desktop = get_versions(args.name)
    pathlist = get_pathlist(rver)

    if args.nopy2:
        scripts = ["Anaconda3-%s-Linux-x86_64.sh" % ver]
    else:
        scripts = ["Anaconda3-%s-Linux-x86_64.sh" % ver, "Anaconda2-%s-Linux-x86_64.sh" % ver]

    ok = True
    for name in scripts:
        if not os.path.isfile(name):
            print("Downloading", name)
            os.system("curl -O https://repo.continuum.io/archive/%s" % name)
            if not os.path.isfile(name):
                print("Error: %s not found and could not download." % name)
                sys.exit(1)

    print("Installing Anaconda3-%s in %s" % (ver, pathlist[0]))
    install_file(scripts[0], pathlist[0], 3)

    if args.nopy2 is False:
        print("Installing Anaconda2-%s in %s" % (ver, pathlist[1]))
        install_file(scripts[1], pathlist[1], 2)

    if not desktop:
        write_env(rver, env_dir, pathlist)

    do_install(desktop, args.name, env_dir, pathlist)


def make_netinst(args):
    pathlist = get_pathlist(args.ver)
    print('pathlist=', pathlist)
    print("Fetching", pathlist[0] + '.tar.xz')
    if args.nopy2 is False:
        print("Fetching", pathlist[1] + '.tar.xz')

    # do_update(desktop, args.name, env_dir, args.examples, pathlist)


def do_install(desktop, cname, env_dir, pathlist):
    install_updates(cname, pathlist)
    install_kernels(pathlist)
    install_octave(pathlist, env_dir, desktop)
    install_R_pkgs(pathlist)
    install_misc(pathlist, desktop)
    install_extensions(pathlist, desktop)
    check_perm(pathlist)
    cleanup(pathlist, desktop)


def make_cleanup(args):
    ver, rver, env_dir, desktop = get_versions(args.name)
    pathlist = get_pathlist(rver)
    # install_extensions(pathlist, desktop)
    check_perm(pathlist)
    # cleanup(pathlist, desktop)


def find_octave(pypath, desktop, env_dir, prompt=True):
    global dirname

    pypath += "/bin/python"

    if desktop:
        try:
            oc = check_output("octave --version", shell=True).split('\n')[0]
            ver = oc.split()[-1]
            opath = check_output("which octave", shell=True).strip()
        except:
            if prompt:
                print("\nWARNING: Octave not found.  You may want to install it.")
                inp = ''
                while inp == '':
                    inp = input('Continue without installing Octave kernel? [Y/N]')
                if inp.upper() != 'Y':
                    sys.exit(0)
            return None

        kernel = open(os.path.join(dirname, 'octave_kernel_desktop')).read()
        s = Template(kernel)
        d = dict(python=pypath,
                 ver="Octave %s" % ver,
                 exe=opath)
        return s.substitute(d)

    try:
        olist = check_output("ls %s/octave*" % env_dir, shell=True).split()
    except:
        if prompt:
            print("\nWARNING: No octave module was found.")
            inp = ''
            while inp == '':
                inp = input('Continue without installing Octave kernel? [Y/N]')
            if inp.upper() != 'Y':
                sys.exit(0)
        return None

    with open(olist[-1]) as f:
        for line in f:
            if line.startswith('prepend PATH'):
                opath = line.split()[-1]
                ver = opath.split('-')[-1].split('/')[0]
                break

    kernel = open(os.path.join(dirname, 'octave_kernel')).read()
    s = Template(kernel)
    d = dict(python=pypath,
             ver="Octave %s" % ver,
             exe=opath + '/octave',
             home=os.path.dirname(opath))
    return s.substitute(d)


if __name__ == '__main__':
    global dirname
    dirname = os.path.dirname(os.path.realpath(sys.argv[0]))

    # at least one install fails if this is not set
    os.environ['LANG'] = 'en_US.UTF-8'

    parser = argparse.ArgumentParser(
            usage="""jpkg <command> [<args>]

Commands are:
   install {configname}    New install using the config file in config/configname.

   update {configname}     Update the current installation from the package list.

   fix {configname}        Fix any problems with local changes and extensions.

Packages will be installed in the current directory in
subdirectories anaconda[2|3]-{rversion}.

To add new packages, add them to the config file
then run the update command.
""")

    parser.add_argument('--nopy2', dest='nopy2', action='store_true',
                        default=False,
                        help='Do not install Python2 (default: False)')

    subparsers = parser.add_subparsers()

    # create the parser for the "install" command
    parser_install = subparsers.add_parser('install')
    parser_install.add_argument('name', type=str)
    parser_install.set_defaults(func=make_new)

    # create the parser for the "update" command
    parser_up = subparsers.add_parser('netinst')
    parser_up.add_argument('ver', type=str)
    parser_up.set_defaults(func=make_netinst)

    # create the parser for the "fix" command
    parser_fix = subparsers.add_parser('cleanup')
    parser_fix.add_argument('name', type=str)
    parser_fix.set_defaults(func=make_fix)

    args = parser.parse_args()
    args.func(args)

    # jpkg install nano41
    # jpkg install nano41-dev
    # jpkg install hubzero41
    # jpkg netinst 5.1
    # jpkg cleanup [5.1]
