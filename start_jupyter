#!/usr/bin/python
"""
This script handles four different modes.

1. start_jupyter
  Runs notebook server in current directory

2. start_jupyter foo.ipynb
  Runs notebook in current directory

3. /path/to/tool/middleware/invoke
  Runs tools.  The invoke script will give the
  path to the notebook to run.  The path of the
  invoke script is used to locate the notebook.
  Current directory will be set to the notebook
  location (usually in the tool bin directory)

4. jupyter/middleware/invoke
  Run jupyter tool.  Starts a notebook server in
  your "notebooks" directory.
"""

from __future__ import print_function
import sys
import os
import glob
import shutil
import signal
import argparse
import json
import binascii
from subprocess import call, Popen, check_output
from string import Template

EXAMPLES = '${examples}'
OLD_EXAMPLES_DIR = " Examples"
EXAMPLES_DIR = "DOCS_AND_EXAMPLES"
INBOXES_DIR = "/data/tools/inboxes"

def handler(signum, frame):
    pass

signal.signal(signal.SIGINT, handler)


def parse_cmd_line():
    prog = "start_jupyter"

    parser = argparse.ArgumentParser(
         usage="""usage: %(prog)s [-h] [-t] [name]

Start a Jupyter notebook-based tool

positional arguments:
  name        Name of notebook to run.  The terminal and
              dashboard (tree view of files) will de disabled.

              If no name is given, a notebook server will
              be started in the current directory.  Terminal
              and dashboard will be enabled.

optional arguments:
  -h, --help  show this help message and exit.
  -d          Show debug (verbose) output.
  -t          Run as a Tool with no notebook controls.
""",
         prog=prog,
         add_help=False)
    parser.add_argument('-t', dest='tool', action='store_true')
    parser.add_argument('-d', dest='debug', action='store_true')
    parser.add_argument('-T')
    parser.add_argument('-h', '--help', dest='help', action='store_true')
    parser.add_argument('name', nargs='?')

    return parser


def get_session():
    try:
        session = os.environ['SESSION']
        sessiondir = os.environ['SESSIONDIR']
    except:
        session = ""

    if session != "":
        return session, sessiondir

    # something went wrong. restore environment variables
    psout = check_output(['ps', 'auxwwe']).split('\n')
    for line in psout:
        ind = line.find('SESSIONDIR')
        if ind > 0:
            sessiondir = line[ind:].split(' ')[0]
            display = line[line.find('DISPLAY'):].split(' ')[0]
            break
    session = sessiondir.split('/')[-1]
    sessiondir = sessiondir.split('=')[1]
    display = display.split('=')[1]
    os.environ['SESSION'] = session
    os.environ['SESSIONDIR'] = sessiondir
    os.environ['DISPLAY'] = display
    return session, sessiondir


def sign_tool(name, sign=False):
    if sign:
        call(['jupyter', 'trust', name])
    else:
        call(['jupyter_unsign.py', name])

def set_tool(name, tool=False):
    """ Set tool metadata.  Must have write permission.
    Otherwise fails silently.
    """
    try:
        data = json.load(open(name))
        if 'tool' in data['metadata']:
            file_tool = data['metadata']['tool']
        else:
            file_tool = False
        if file_tool != tool:
            data['metadata']['tool'] = tool
            with open(name, 'w') as f:
                json.dump(data, f)
    except:
        pass

def get_proxy_addr():
    session, sessiondir = get_session()
    fn = os.path.join(sessiondir, 'resources')
    with open(fn, 'r') as f:
        res = f.read()
    for line in res.split('\n'):
        if line.startswith('hub_url'):
            url = line.split()[1]
        elif line.startswith('filexfer_port'):
            fxp = str(int(line.split()[1]) % 1000)
        elif line.startswith('filexfer_cookie'):
            fxc = line.split()[1]
    url_path="/weber/%s/%s/%s/" % (session, fxc, fxp)
    proxy_url = "https://proxy." + url.split('//')[1] + url_path
    return url_path, proxy_url

def get_cookie():
    cookie_name = ""
    try:
        session = int(os.environ['SESSION'])
        pwfile = glob.glob('/var/run/Xvnc/passwd-*')[0]
        with open(pwfile, 'rb') as f:
            pwd = binascii.hexlify(f.read()).decode('utf-8')
            token = "%d:%s" % (session, str(pwd))

        fn = os.path.join(os.environ['SESSIONDIR'], 'resources')
        with open(fn, 'r') as f:
            res = f.read()
        for line in res.split('\n'):
            if line.startswith('hub_url'):
                url = line.split()[1]
                host = url[url.find('//') + 2:]
                cookie_name = 'weber-auth-' + host.replace('.', '-')
                break
    except:
        # not running on a hub
        return "", ""
    print("returning %s, %s" % (cookie_name, token))
    return cookie_name, token

def load_examples(arglist):
    # Run in users 'notebooks' subdirectory
    os.chdir(os.environ['HOME'])
    call(['mkdir', '-p', 'notebooks'])
    os.chdir('notebooks')

    # delete any old symlink
    if os.path.islink(OLD_EXAMPLES_DIR):
        os.remove(OLD_EXAMPLES_DIR)

    if not os.path.isdir(EXAMPLES_DIR):
        call(['mkdir','-p',EXAMPLES_DIR])

    # create directory of symlinks to examples
    call("cp -sRf %s/* %s" % (EXAMPLES, EXAMPLES_DIR), shell=True)

    # The NotebookSettings is an autorun tool and we must flag it as trusted.
    sign_tool('%s/NotebookSettings/NotebookSettings.ipynb' % EXAMPLES, True)
    # also trust Index page
    sign_tool('%s/Index.ipynb' % EXAMPLES, True)
    notebook = "notebooks/%s/Index.ipynb" % EXAMPLES_DIR
    arglist.append('--NotebookApp.default_url="%s"' % notebook)

    # create INBOX symlink if needeed
    idir = os.path.join(INBOXES_DIR, os.environ['LOGNAME'])
    if os.path.exists(idir) and not os.path.exists('INBOX'):
        os.symlink(idir, 'INBOX')


def find_notebook(name, tool, arglist):
    if tool is None:
        if not os.path.isfile(name):
            print("Cannot find %s." % name, file=sys.stderr)
            sys.exit(1)
        return os.path.split(name)

    # We are running a published notebook.
    # symlink copy it to RESULTSDIR
    tname = os.path.basename(os.path.dirname(tool))
    tdest = os.path.join(os.environ['RESULTSDIR'], tname)

    # remove and make tdest
    if os.path.exists(tdest):
        shutil.rmtree(tdest)
    os.makedirs(tdest)
    call("cp -sRf %s/* %s" % (tool, tdest), shell=True)

    # notebook will be either relative to the tool
    # directory or in the bin directory
    nb_name = os.path.abspath(os.path.join(tdest, name))
    if not os.path.isfile(nb_name):
        # look in bin dir
        nb_name = os.path.abspath(os.path.join(tdest, 'bin', name))
        if not os.path.isfile(nb_name):
            print("Cannot find %s." % name, file=sys.stderr)
            sys.exit(1)

    # It's a published tool, so no terminals or dashboard
    arglist.append("--NotebookApp.nbserver_extensions={'terminate':True}")
    return os.path.split(nb_name)


def run_notebook(args):
    arglist = []

    if args.name is None:
        if args.tool:
            parser.error("ERROR: -t with no filename.\n")

        # If no notebook name, just run server in current directory,
        # unless -T parameter is there, then load examples.  Normally
        # only the jupyter tool invoke script does this.
        if args.T:
            load_examples(arglist)

    else:
        nb_dir, nb_name = find_notebook(args.name, args.T, arglist)
        if nb_dir:
            print("Changing directory to", nb_dir)
            os.chdir(nb_dir)

        arglist.append('--NotebookApp.default_url="notebooks/%s"' % nb_name)
        set_tool(nb_name, args.tool)
        sign_tool(nb_name, args.tool)

    # When invoked by the system, the shell will be dash.
    workspace = True
    if os.environ["SHELL"] == "/bin/dash":
        workspace = False
        # Users probably want "bash"
        os.environ['SHELL'] = "/bin/bash"

    p_path, p_url = get_proxy_addr()
    cmdlist = [
              "jupyter", "notebook", "--no-browser", "--port=8000",
              "--ip=0.0.0.0",
              '--NotebookApp.base_url="%s"' % p_path
              ]

    token = get_cookie()[1]
    if token:
        cmdlist.append('--NotebookApp.token=%s' % token)

    if args.debug:
        cmdlist.append('--Application.log_level="DEBUG"')
    cmdlist += arglist

    urlstring = "%s?token=%s" % (p_url, token)
    print("=" * len(urlstring))
    print("URL is\n%s" % urlstring)
    print("=" * len(urlstring))
    sys.stdout.flush()  # make sure this gets displayed now.

    # If invoked by system, display logo for screenshots
    if not workspace:
        Popen(['xview',  '-fit', '-fullscreen',
              '%s/images/jupyter.gif' % EXAMPLES])

    # having DISPLAY set breaks notebook terminals
    os.environ['DISPLAY'] = ""
    if args.debug:
        print("cmdlist:", cmdlist)
    call(cmdlist)
    print("\n\nNotebook server terminated.\n")


def find_headers(file):
    found = []
    try:
        f = open(file, 'r')
        for line in f.read().split('\n'):
            if line.startswith('/** LOGO '):
                found.append('LOGO')
            elif line.startswith('/** HEADER '):
                found.append('HEADER')
        f.close()
    except:
        pass
    return found


header_template = """
/** HEADER **/
var logo = document.getElementById("ipython_notebook").children[0];
var host = window.location.hostname.replace('proxy.', '');
var uid = ${uid};
var base = Jupyter.notebook.base_url;
var stat = 'https://' + window.location.hostname + base + 'static/';
logo.href = 'https://' + host + '/members/' + uid + '/dashboard';
logo.target = "_blank";
logo.title = "${shost} Dashboard";
var hostlogo = stat + '${lhost}.png';
var jlogo = stat + 'jupyter.png';
logo.innerHTML=`<img src="${hostlogo}" style="margin:0px 20px 0px 0px"><img src="${jlogo}">`;

var term = document.getElementById("login_widget");
var end = base.indexOf('/',7);
var session = base.slice(7,end);
var url = `https://${host}/tools/jupyter/stop?sess=${session}`
term.innerHTML = `<button class="btn btn-sm navbar-btn" title="Terminate this notebook or tool and any others in the session" onclick="window.location.href='${url}'">Terminate Session</button>`;
"""


def write_custom():
    cdir = os.path.expanduser("~/.jupyter/custom")
    cjs = os.path.join(cdir, 'custom.js')
    if not os.path.exists(cdir):
        os.system('mkdir -p ' + cdir)

    found = find_headers(cjs)

    mode = 'a'
    if 'HEADER' in found:
        # new file. finished here
        return
    if 'LOGO' in found:
        # old file.  overwrite with new
        mode = 'w'

    t = Template(header_template)
    host = os.uname()[1]
    uid = os.getuid()
    with open(cjs, mode) as f:
        f.write(t.safe_substitute(uid=uid, shost=host, lhost=host.lower()))

if __name__ == "__main__":
    if os.getuid() == 0:
        print("Do not run this as root.", file=sys.stderr)
        sys.exit(1)

    parser = parse_cmd_line()
    args = parser.parse_args()
    if args.help:
        parser.print_usage()
        sys.exit(0)

    write_custom()
    run_notebook(args)
