#!/usr/bin/python
"""
This script handles four different modes.

1. start_jupyter
  Runs notebook server in current directory

2. start_jupyter foo.ipynb
  Runs notebook in current directory

3. /path/to/tool/middleware/invoke
  Runs tools.  The invoke script will give the
  path to the notebook to run.  The path of the
  invoke script is used to locate the notebook.
  Current directory will be set to the notebook
  location (usually in the tool bin directory)

4. jupyter/middleware/invoke
  Run jupyter tool.  Starts a notebook server in
  your "notebooks" directory.
"""

from __future__ import print_function
import sys
import os
import signal
import argparse
import json
from subprocess import call, Popen, check_output

EXAMPLES = '/apps/share64/debian7/anaconda/examples-4.1'
EXAMPLES_DIR = " Examples"


def handler(signum, frame):
    pass

signal.signal(signal.SIGINT, handler)


def parse_cmd_line():
    prog = "start_jupyter"

    parser = argparse.ArgumentParser(
         usage="""usage: %(prog)s [-h] [-t] [name]

Start a Jupyter notebook-based tool

positional arguments:
  name        Name of notebook to run.  The terminal and
              dashboard (tree view of files) will de disabled.

              If no name is given, a notebook server will
              be started in the current directory.  Terminal
              and dashboard will be enabled.

optional arguments:
  -h, --help  show this help message and exit
  -t          Run as a Tool with no notebook controls.
""",
         prog=prog,
         add_help=False)
    parser.add_argument('-t', dest='tool', action='store_true')
    parser.add_argument('-T')
    parser.add_argument('-h', '--help', dest='help', action='store_true')
    parser.add_argument('name', nargs='?')

    return parser


def get_session():
    try:
        session = os.environ['SESSION']
        sessiondir = os.environ['SESSIONDIR']
    except:
        session = ""

    if session != "":
        return session, sessiondir

    # something went wrong. restore environment variables
    psout = check_output(['ps', 'auxwwe']).split('\n')
    for line in psout:
        ind = line.find('SESSIONDIR')
        if ind > 0:
            sessiondir = line[ind:].split(' ')[0]
            display = line[line.find('DISPLAY'):].split(' ')[0]
            break
    session = sessiondir.split('/')[-1]
    sessiondir = sessiondir.split('=')[1]
    display = display.split('=')[1]
    os.environ['SESSION'] = session
    os.environ['SESSIONDIR'] = sessiondir
    os.environ['DISPLAY'] = display
    return session, sessiondir


def sign_tool(name, sign=False):
    if sign:
        call(['jupyter', 'trust', name])
    else:
        call(['jupyter_unsign.py', name])

def set_tool(name, tool=False):
    """ Set tool metadata.  Must have write permission.
    Otherwise fails silently.
    """
    try:
        data = json.load(open(name))
        if 'tool' in data['metadata']:
            file_tool = data['metadata']['tool']
        else:
            file_tool = False
        if file_tool != tool:
            data['metadata']['tool'] = tool
            with open(name, 'w') as f:
                json.dump(data, f)
    except:
        pass

def get_proxy_addr():
    session, sessiondir = get_session()
    fn = os.path.join(sessiondir, 'resources')
    with open(fn, 'r') as f:
        res = f.read()
    for line in res.split('\n'):
        if line.startswith('hub_url'):
            url = line.split()[1]
        elif line.startswith('filexfer_port'):
            fxp = str(int(line.split()[1]) % 1000)
        elif line.startswith('filexfer_cookie'):
            fxc = line.split()[1]
    url_path="/weber/%s/%s/%s/" % (session, fxc, fxp)
    proxy_url = "https://proxy." + url.split('//')[1] + url_path
    return url_path, proxy_url


def run_notebook(args):
    arglist = []

    if args.name is None:
        if args.tool:
            parser.error("ERROR: -t with no filename.\n")

        if args.T:
            # Run in users 'notebooks' subdirectory
            os.chdir(os.environ['HOME'])
            call(['mkdir', '-p', 'notebooks'])
            os.chdir('notebooks')

            # create symlink if necessary
            try:
                os.symlink(EXAMPLES , EXAMPLES_DIR)
            except:
                pass

            # The NotebookSettings is an autorun tool and we must flag it as trusted.
            sign_tool('%s/NotebookSettings/NotebookSettings.ipynb' % EXAMPLES, True)
            notebook = "notebooks/%s/Index.ipynb" % EXAMPLES_DIR
            arglist.append('--NotebookApp.default_url="%s"' % notebook)
    else:
        if args.T is None:
            if not os.path.isfile(args.name):
                print("Cannot find %s." % args.name, file=sys.stderr)
                sys.exit(1)
            nb_dir, nb_name = os.path.split(args.name)
        else:
            # notebook will be either relative to the tool
            # directory or in the bin directroy
            nb_name = os.path.abspath(os.path.join(args.T, args.name))
            if not os.path.isfile(nb_name):
                # look in bin dir
                nb_name = os.path.abspath(os.path.join(args.T, 'bin', args.name))
                if not os.path.isfile(nb_name):
                    print("Cannot find %s." % args.name, file=sys.stderr)
                    sys.exit(1)
            nb_dir, nb_name = os.path.split(nb_name)

            # This will remove terminals and tree view (dashboard)
            arglist.append("--NotebookApp.nbserver_extensions={'terminate':True}")

        if nb_dir:
            print("Changing directory to", nb_dir)
            os.chdir(nb_dir)
        arglist.append('--NotebookApp.default_url="notebooks/%s"' % nb_name)

        if nb_dir.startswith('/apps'):
            print("WARNING: You should be runing tools in /apps using their invoke script.")
        else:
            set_tool(nb_name, args.tool)
        sign_tool(nb_name, args.tool)


    # When invoked by the system, the shell will be dash.
    workspace = True
    if os.environ["SHELL"] == "/bin/dash":
        workspace = False

    # system shell is "dash". Users probably want "bash"
    os.environ['SHELL'] = "/bin/bash"

    p_path, p_url = get_proxy_addr()
    cmdlist = ["jupyter", "notebook", "--no-browser", "--port=8000",
          "--ip=0.0.0.0",
          '--NotebookApp.base_url="%s"' % p_path
        ]
    cmdlist += arglist

    print("=" * 60)
    print("URL is")
    print(p_url)
    print("=" * 60)
    sys.stdout.flush()  ; # make sure this gets displayed now.


    # If invoked by system, display logo for screenshots
    if not workspace:
        Popen(['xview',  '-fit', '-fullscreen',
              '%s/images/jupyter.gif' % EXAMPLES])

    # having DISPLAY set breaks notebook terminals
    os.environ['DISPLAY']= ""

    call(cmdlist)
    print("\n\nNotebook server terminated.\n")

if __name__ == "__main__":

    if os.getuid() == 0:
        print("Do not run this as root.", file=sys.stderr)
        sys.exit(1)

    parser = parse_cmd_line()
    args = parser.parse_args()
    if args.help:
        parser.print_usage()
        sys.exit(0)

    run_notebook(args)
